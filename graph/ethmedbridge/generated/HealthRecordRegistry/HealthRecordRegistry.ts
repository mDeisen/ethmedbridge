// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RecordIssued extends ethereum.Event {
  get params(): RecordIssued__Params {
    return new RecordIssued__Params(this);
  }
}

export class RecordIssued__Params {
  _event: RecordIssued;

  constructor(event: RecordIssued) {
    this._event = event;
  }

  get issuer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recordId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class RecordRegistered extends ethereum.Event {
  get params(): RecordRegistered__Params {
    return new RecordRegistered__Params(this);
  }
}

export class RecordRegistered__Params {
  _event: RecordRegistered;

  constructor(event: RecordRegistered) {
    this._event = event;
  }

  get recordTypeId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get metadataURI(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class HealthRecordRegistry__recordsResult {
  value0: boolean;
  value1: string;

  constructor(value0: boolean, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }

  getAllowed(): boolean {
    return this.value0;
  }

  getMetadataURI(): string {
    return this.value1;
  }
}

export class HealthRecordRegistry extends ethereum.SmartContract {
  static bind(address: Address): HealthRecordRegistry {
    return new HealthRecordRegistry("HealthRecordRegistry", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockedIssuers(issuer: Address): boolean {
    let result = super.call("lockedIssuers", "lockedIssuers(address):(bool)", [
      ethereum.Value.fromAddress(issuer)
    ]);

    return result[0].toBoolean();
  }

  try_lockedIssuers(issuer: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "lockedIssuers",
      "lockedIssuers(address):(bool)",
      [ethereum.Value.fromAddress(issuer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  records(recordId: BigInt): HealthRecordRegistry__recordsResult {
    let result = super.call("records", "records(uint256):(bool,string)", [
      ethereum.Value.fromUnsignedBigInt(recordId)
    ]);

    return new HealthRecordRegistry__recordsResult(
      result[0].toBoolean(),
      result[1].toString()
    );
  }

  try_records(
    recordId: BigInt
  ): ethereum.CallResult<HealthRecordRegistry__recordsResult> {
    let result = super.tryCall("records", "records(uint256):(bool,string)", [
      ethereum.Value.fromUnsignedBigInt(recordId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new HealthRecordRegistry__recordsResult(
        value[0].toBoolean(),
        value[1].toString()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class DisableRecordCall extends ethereum.Call {
  get inputs(): DisableRecordCall__Inputs {
    return new DisableRecordCall__Inputs(this);
  }

  get outputs(): DisableRecordCall__Outputs {
    return new DisableRecordCall__Outputs(this);
  }
}

export class DisableRecordCall__Inputs {
  _call: DisableRecordCall;

  constructor(call: DisableRecordCall) {
    this._call = call;
  }

  get _recordId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class DisableRecordCall__Outputs {
  _call: DisableRecordCall;

  constructor(call: DisableRecordCall) {
    this._call = call;
  }
}

export class IssueRecordCall extends ethereum.Call {
  get inputs(): IssueRecordCall__Inputs {
    return new IssueRecordCall__Inputs(this);
  }

  get outputs(): IssueRecordCall__Outputs {
    return new IssueRecordCall__Outputs(this);
  }
}

export class IssueRecordCall__Inputs {
  _call: IssueRecordCall;

  constructor(call: IssueRecordCall) {
    this._call = call;
  }

  get _record(): IssueRecordCall_recordStruct {
    return changetype<IssueRecordCall_recordStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class IssueRecordCall__Outputs {
  _call: IssueRecordCall;

  constructor(call: IssueRecordCall) {
    this._call = call;
  }
}

export class IssueRecordCall_recordStruct extends ethereum.Tuple {
  get issuer(): Address {
    return this[0].toAddress();
  }

  get recordTypeId(): i32 {
    return this[1].toI32();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }
}

export class IssueRecordBatchCall extends ethereum.Call {
  get inputs(): IssueRecordBatchCall__Inputs {
    return new IssueRecordBatchCall__Inputs(this);
  }

  get outputs(): IssueRecordBatchCall__Outputs {
    return new IssueRecordBatchCall__Outputs(this);
  }
}

export class IssueRecordBatchCall__Inputs {
  _call: IssueRecordBatchCall;

  constructor(call: IssueRecordBatchCall) {
    this._call = call;
  }

  get _records(): Array<IssueRecordBatchCall_recordsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      IssueRecordBatchCall_recordsStruct
    >();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class IssueRecordBatchCall__Outputs {
  _call: IssueRecordBatchCall;

  constructor(call: IssueRecordBatchCall) {
    this._call = call;
  }
}

export class IssueRecordBatchCall_recordsStruct extends ethereum.Tuple {
  get issuer(): Address {
    return this[0].toAddress();
  }

  get recordTypeId(): i32 {
    return this[1].toI32();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }
}

export class RegisterNewRecordCall extends ethereum.Call {
  get inputs(): RegisterNewRecordCall__Inputs {
    return new RegisterNewRecordCall__Inputs(this);
  }

  get outputs(): RegisterNewRecordCall__Outputs {
    return new RegisterNewRecordCall__Outputs(this);
  }
}

export class RegisterNewRecordCall__Inputs {
  _call: RegisterNewRecordCall;

  constructor(call: RegisterNewRecordCall) {
    this._call = call;
  }

  get _newRecordId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _metadataURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RegisterNewRecordCall__Outputs {
  _call: RegisterNewRecordCall;

  constructor(call: RegisterNewRecordCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetIssuerLockCall extends ethereum.Call {
  get inputs(): SetIssuerLockCall__Inputs {
    return new SetIssuerLockCall__Inputs(this);
  }

  get outputs(): SetIssuerLockCall__Outputs {
    return new SetIssuerLockCall__Outputs(this);
  }
}

export class SetIssuerLockCall__Inputs {
  _call: SetIssuerLockCall;

  constructor(call: SetIssuerLockCall) {
    this._call = call;
  }

  get _issuer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get locked(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetIssuerLockCall__Outputs {
  _call: SetIssuerLockCall;

  constructor(call: SetIssuerLockCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
